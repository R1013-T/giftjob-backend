package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"giftjob-backend/graph/model"
	"time"

	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.CreateUserInput) (*model.User, error) {
	user := model.User{
		ID:        uuid.New().String(),
		Provider:  input.Provider,
		UID:       input.UID,
		Name:      input.Name,
		Email:     input.Email,
		Image:     input.Image,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	if err := r.DB.Create(user).Error; err != nil {
		return nil, err
	}

	return &user, nil
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input *model.SignInInput) (*model.User, error) {
	return &model.User{
		Name: "Sign In",
	}, nil
}

// CreateTemplate is the resolver for the createTemplate field.
func (r *mutationResolver) CreateTemplate(ctx context.Context, input *model.CreateTemplateInput) (*model.CompanyCustomTemplate, error) {
	template := model.CompanyCustomTemplate{
		ID:        uuid.New().String(),
		Name:      input.Name,
		UserID:    input.UserID,
		IsTrash:   input.IsTrash,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	if err := r.DB.Create(template).Error; err != nil {
		return nil, err
	}

	return &template, nil
}

// UpdateTemplate is the resolver for the updateTemplate field.
func (r *mutationResolver) UpdateTemplate(ctx context.Context, input *model.UpdateTemplateInput) (*model.CompanyCustomTemplate, error) {
	template := &model.CompanyCustomTemplate{}
	if err := r.DB.Where("id = ?", input.ID).First(&template).Error; err != nil {
		return nil, err
	}

	if input.Name != nil {
		template.Name = *input.Name
	}
	if input.UserID != nil {
		template.UserID = *input.UserID
	}
	if input.IsTrash != nil {
		template.IsTrash = input.IsTrash
	}

	template.UpdatedAt = time.Now()

	if err := r.DB.Save(template).Error; err != nil {
		return nil, err
	}

	return template, nil
}

// DeleteTemplate is the resolver for the deleteTemplate field.
func (r *mutationResolver) DeleteTemplate(ctx context.Context, id string) (*model.CompanyCustomTemplate, error) {
	template := &model.CompanyCustomTemplate{}

	if err := r.DB.Where("id = ?", id).First(&template).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Where("template_id = ?", id).Delete(&model.CompanyCustomTemplateField{}).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&template).Error; err != nil {
		return nil, err
	}

	return template, nil
}

// CreateTemplateField is the resolver for the createTemplateField field.
func (r *mutationResolver) CreateTemplateField(ctx context.Context, input *model.CreateTemplateFieldInput) (*model.CompanyCustomTemplateField, error) {
	templateField := model.CompanyCustomTemplateField{
		ID:         uuid.New().String(),
		GroupName:  input.GroupName,
		Label:      input.Label,
		Type:       input.Type,
		TemplateID: input.TemplateID,
		CreatedAt:  time.Now(),
		UpdatedAt:  time.Now(),
	}

	if err := r.DB.Create(templateField).Error; err != nil {
		return nil, err
	}

	return &templateField, nil
}

// UpdateTemplateField is the resolver for the updateTemplateField field.
func (r *mutationResolver) UpdateTemplateField(ctx context.Context, input *model.UpdateTemplateFieldInput) (*model.CompanyCustomTemplateField, error) {
	templateField := &model.CompanyCustomTemplateField{}
	if err := r.DB.Where("id = ?", input.ID).First(&templateField).Error; err != nil {
		return nil, err
	}

	if input.Label != nil {
		templateField.Label = *input.Label
	}
	if input.Type != nil {
		templateField.Type = *input.Type
	}

	templateField.UpdatedAt = time.Now()

	if err := r.DB.Save(templateField).Error; err != nil {
		return nil, err
	}

	return templateField, nil
}

// DeleteTemplateField is the resolver for the deleteTemplateField field.
func (r *mutationResolver) DeleteTemplateField(ctx context.Context, id string) (*model.CompanyCustomTemplateField, error) {
	templateField := &model.CompanyCustomTemplateField{}

	if err := r.DB.Where("id = ?", id).First(&templateField).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&templateField).Error; err != nil {
		return nil, err
	}

	return templateField, nil
}

// CreateCompany is the resolver for the createCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input *model.CreateCompanyInput) (*model.Company, error) {
	company := model.Company{
		ID:              uuid.New().String(),
		Name:            input.Name,
		Tell:            input.Tell,
		Email:           input.Email,
		Address:         input.Address,
		SiteURL:         input.SiteURL,
		Industry:        input.Industry,
		EmployeesNumber: input.EmployeesNumber,
		IsPinned:        input.IsPinned,
		IsTrash:         input.IsTrash,
		UserID:          input.UserID,
		CreatedAt:       time.Now(),
		UpdatedAt:       time.Now(),
	}

	if err := r.DB.Create(company).Error; err != nil {
		return nil, err
	}

	return &company, nil
}

// UpdateCompany is the resolver for the updateCompany field.
func (r *mutationResolver) UpdateCompany(ctx context.Context, input *model.UpdateCompanyInput) (*model.Company, error) {
	company := &model.Company{}
	if err := r.DB.Where("id = ?", input.ID).First(&company).Error; err != nil {
		return nil, err
	}

	if input.Name != nil {
		company.Name = input.Name
	}
	if input.Tell != nil {
		company.Tell = input.Tell
	}
	if input.Email != nil {
		company.Email = input.Email
	}
	if input.Address != nil {
		company.Address = input.Address
	}
	if input.SiteURL != nil {
		company.SiteURL = input.SiteURL
	}
	if input.Industry != nil {
		company.Industry = input.Industry
	}
	if input.EmployeesNumber != nil {
		company.EmployeesNumber = input.EmployeesNumber
	}
	if input.IsPinned != nil {
		company.IsPinned = input.IsPinned
	}
	if input.IsTrash != nil {
		company.IsTrash = input.IsTrash
	}

	company.UpdatedAt = time.Now()

	if err := r.DB.Save(company).Error; err != nil {
		return nil, err
	}

	return company, nil
}

// DeleteCompany is the resolver for the deleteCompany field.
func (r *mutationResolver) DeleteCompany(ctx context.Context, id string) (*model.Company, error) {
	company := &model.Company{}

	if err := r.DB.Where("id = ?", id).First(&company).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Where("company_id = ?", id).Delete(&model.CompanyCustomField{}).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&company).Error; err != nil {
		return nil, err
	}

	return company, nil
}

// CreateCustomField is the resolver for the createCustomField field.
func (r *mutationResolver) CreateCustomField(ctx context.Context, input *model.CreateCustomFieldInput) (*model.CompanyCustomField, error) {
	customField := model.CompanyCustomField{
		ID:        uuid.New().String(),
		GroupName: input.GroupName,
		Label:     input.Label,
		Value:     input.Value,
		Type:      input.Type,
		CompanyID: input.CompanyID,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	if err := r.DB.Create(customField).Error; err != nil {
		return nil, err
	}

	return &customField, nil
}

// UpdateCustomField is the resolver for the updateCustomField field.
func (r *mutationResolver) UpdateCustomField(ctx context.Context, input *model.UpdateCustomFieldInput) (*model.CompanyCustomField, error) {
	customFiled := &model.CompanyCustomField{}
	if err := r.DB.Where("id = ?", input.ID).First(&customFiled).Error; err != nil {
		return nil, err
	}

	if input.GroupName != nil {
		customFiled.GroupName = *input.GroupName
	}
	if input.Label != nil {
		customFiled.Label = *input.Label
	}
	if input.Value != nil {
		customFiled.Value = input.Value
	}
	if input.Type != nil {
		customFiled.Type = *input.Type
	}

	customFiled.UpdatedAt = time.Now()

	if err := r.DB.Save(customFiled).Error; err != nil {
		return nil, err
	}

	return customFiled, nil
}

// DeleteCustomField is the resolver for the deleteCustomField field.
func (r *mutationResolver) DeleteCustomField(ctx context.Context, id string) (*model.CompanyCustomField, error) {
	customFiled := &model.CompanyCustomField{}

	if err := r.DB.Where("id = ?", id).First(&customFiled).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&customFiled).Error; err != nil {
		return nil, err
	}

	return customFiled, nil
}

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, input *model.CreatePersonInput) (*model.Person, error) {
	person := model.Person{
		ID:         uuid.New().String(),
		Name:       input.Name,
		Department: input.Department,
		Position:   input.Position,
		Tell:       input.Tell,
		Email:      input.Email,
		Memo:       input.Memo,
		IsTrash:    input.IsTrash,
		CompanyID:  input.CompanyID,
		UserID:     input.UserID,
		CreatedAt:  time.Now(),
		UpdatedAt:  time.Now(),
	}

	if err := r.DB.Create(person).Error; err != nil {
		return nil, err
	}

	return &person, nil
}

// UpdatePerson is the resolver for the updatePerson field.
func (r *mutationResolver) UpdatePerson(ctx context.Context, input *model.UpdatePersonInput) (*model.Person, error) {
	person := &model.Person{}
	if err := r.DB.Where("id = ?", input.ID).First(&person).Error; err != nil {
		return nil, err
	}

	if input.Name != nil {
		person.Name = input.Name
	}
	if input.Department != nil {
		person.Department = input.Department
	}
	if input.Position != nil {
		person.Position = input.Position
	}
	if input.Tell != nil {
		person.Tell = input.Tell
	}
	if input.Email != nil {
		person.Email = input.Email
	}
	if input.Memo != nil {
		person.Memo = input.Memo
	}
	if input.IsTrash != nil {
		person.IsTrash = input.IsTrash
	}

	person.UpdatedAt = time.Now()

	if err := r.DB.Save(person).Error; err != nil {
		return nil, err
	}

	return person, nil
}

// DeletePerson is the resolver for the deletePerson field.
func (r *mutationResolver) DeletePerson(ctx context.Context, id string) (*model.Person, error) {
	person := &model.Person{}

	if err := r.DB.Where("id = ?", id).First(&person).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&person).Error; err != nil {
		return nil, err
	}

	return person, nil
}

// CreateNoteForPerson is the resolver for the createNoteForPerson field.
func (r *mutationResolver) CreateNoteForPerson(ctx context.Context, input *model.CreateNoteInput) (*model.Note, error) {
	note := model.Note{
		ID:        uuid.New().String(),
		Title:     input.Title,
		Content:   input.Content,
		IsPinned:  input.IsPinned,
		IsTrash:   input.IsTrash,
		UserID:    input.UserID,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	if err := r.DB.Create(note).Error; err != nil {
		return nil, err
	}

	return &note, nil
}

// UpdateNoteForPerson is the resolver for the updateNoteForPerson field.
func (r *mutationResolver) UpdateNoteForPerson(ctx context.Context, input *model.UpdateNoteInput) (*model.Note, error) {
	note := &model.Note{}
	if err := r.DB.Where("id = ?", input.ID).First(&note).Error; err != nil {
		return nil, err
	}

	if input.Title != nil {
		note.Title = input.Title
	}
	if input.Content != nil {
		note.Content = input.Content
	}
	if input.IsPinned != nil {
		note.IsPinned = input.IsPinned
	}
	if input.IsTrash != nil {
		note.IsTrash = input.IsTrash
	}

	note.UpdatedAt = time.Now()

	if err := r.DB.Save(note).Error; err != nil {
		return nil, err
	}

	return note, nil
}

// DeleteNoteForPerson is the resolver for the deleteNoteForPerson field.
func (r *mutationResolver) DeleteNoteForPerson(ctx context.Context, id string) (*model.Note, error) {
	note := &model.Note{}

	if err := r.DB.Where("id = ?", id).First(&note).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&note).Error; err != nil {
		return nil, err
	}

	return note, nil
}

// CreateCalendar is the resolver for the createCalendar field.
func (r *mutationResolver) CreateCalendar(ctx context.Context, input *model.CreateCalendarInput) (*model.Calendar, error) {
	calendar := model.Calendar{
		ID:           uuid.New().String(),
		Title:        input.Title,
		Description:  input.Description,
		StartTime:    input.StartTime,
		EndTime:      input.EndTime,
		Location:     input.Location,
		IsAllDay:     input.IsAllDay,
		IsFromGoogle: input.IsFromGoogle,
		CompanyID:    input.CompanyID,
		UserID:       input.UserID,
		CreatedAt:    time.Now(),
		UpdatedAt:    time.Now(),
	}

	if err := r.DB.Create(calendar).Error; err != nil {
		return nil, err
	}

	return &calendar, nil
}

// UpdateCalendar is the resolver for the updateCalendar field.
func (r *mutationResolver) UpdateCalendar(ctx context.Context, input *model.UpdateCalendarInput) (*model.Calendar, error) {
	calendar := &model.Calendar{}
	if err := r.DB.Where("id = ?", input.ID).First(&calendar).Error; err != nil {
		return nil, err
	}

	if input.Title != nil {
		calendar.Title = input.Title
	}
	if input.Description != nil {
		calendar.Description = input.Description
	}
	if input.StartTime != nil {
		calendar.StartTime = input.StartTime
	}
	if input.EndTime != nil {
		calendar.EndTime = input.EndTime
	}
	if input.Location != nil {
		calendar.Location = input.Location
	}
	if input.IsAllDay != nil {
		calendar.IsAllDay = input.IsAllDay
	}
	if input.IsFromGoogle != nil {
		calendar.IsFromGoogle = input.IsFromGoogle
	}

	calendar.UpdatedAt = time.Now()

	if err := r.DB.Save(calendar).Error; err != nil {
		return nil, err
	}

	return calendar, nil
}

// DeleteCalendar is the resolver for the deleteCalendar field.
func (r *mutationResolver) DeleteCalendar(ctx context.Context, id string) (*model.Calendar, error) {
	calendar := &model.Calendar{}

	if err := r.DB.Where("id = ?", id).First(&calendar).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&calendar).Error; err != nil {
		return nil, err
	}

	return calendar, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
