package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"fmt"
	"giftjob-backend/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.CreateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// CreateTemplate is the resolver for the createTemplate field.
func (r *mutationResolver) CreateTemplate(ctx context.Context, input *model.CreateTemplateInput) (*model.CompanyCustomTemplate, error) {
	panic(fmt.Errorf("not implemented: CreateTemplate - createTemplate"))
}

// UpdateTemplate is the resolver for the updateTemplate field.
func (r *mutationResolver) UpdateTemplate(ctx context.Context, input *model.UpdateTemplateInput) (*model.CompanyCustomTemplate, error) {
	panic(fmt.Errorf("not implemented: UpdateTemplate - updateTemplate"))
}

// DeleteTemplate is the resolver for the deleteTemplate field.
func (r *mutationResolver) DeleteTemplate(ctx context.Context, id string) (*model.CompanyCustomTemplate, error) {
	panic(fmt.Errorf("not implemented: DeleteTemplate - deleteTemplate"))
}

// CreateCompany is the resolver for the createCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input *model.CreateCompanyInput) (*model.Company, error) {
	panic(fmt.Errorf("not implemented: CreateCompany - createCompany"))
}

// UpdateCompany is the resolver for the updateCompany field.
func (r *mutationResolver) UpdateCompany(ctx context.Context, input *model.UpdateCompanyInput) (*model.Company, error) {
	panic(fmt.Errorf("not implemented: UpdateCompany - updateCompany"))
}

// DeleteCompany is the resolver for the deleteCompany field.
func (r *mutationResolver) DeleteCompany(ctx context.Context, id string) (*model.Company, error) {
	panic(fmt.Errorf("not implemented: DeleteCompany - deleteCompany"))
}

// CreateCustomField is the resolver for the createCustomField field.
func (r *mutationResolver) CreateCustomField(ctx context.Context, input *model.CreateCustomFieldInput) (*model.CompanyCustomField, error) {
	panic(fmt.Errorf("not implemented: CreateCustomField - createCustomField"))
}

// UpdateCustomField is the resolver for the updateCustomField field.
func (r *mutationResolver) UpdateCustomField(ctx context.Context, input *model.UpdateCustomFieldInput) (*model.CompanyCustomField, error) {
	panic(fmt.Errorf("not implemented: UpdateCustomField - updateCustomField"))
}

// DeleteCustomField is the resolver for the deleteCustomField field.
func (r *mutationResolver) DeleteCustomField(ctx context.Context, id string) (*model.CompanyCustomField, error) {
	panic(fmt.Errorf("not implemented: DeleteCustomField - deleteCustomField"))
}

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, input *model.CreatePersonInput) (*model.Person, error) {
	panic(fmt.Errorf("not implemented: CreatePerson - createPerson"))
}

// UpdatePerson is the resolver for the updatePerson field.
func (r *mutationResolver) UpdatePerson(ctx context.Context, input *model.UpdatePersonInput) (*model.Person, error) {
	panic(fmt.Errorf("not implemented: UpdatePerson - updatePerson"))
}

// DeletePerson is the resolver for the deletePerson field.
func (r *mutationResolver) DeletePerson(ctx context.Context, id string) (*model.Person, error) {
	panic(fmt.Errorf("not implemented: DeletePerson - deletePerson"))
}

// CreateNoteForPerson is the resolver for the createNoteForPerson field.
func (r *mutationResolver) CreateNoteForPerson(ctx context.Context, input *model.CreateNoteInput) (*model.Note, error) {
	panic(fmt.Errorf("not implemented: CreateNoteForPerson - createNoteForPerson"))
}

// UpdateNoteForPerson is the resolver for the updateNoteForPerson field.
func (r *mutationResolver) UpdateNoteForPerson(ctx context.Context, input *model.UpdateNoteInput) (*model.Note, error) {
	panic(fmt.Errorf("not implemented: UpdateNoteForPerson - updateNoteForPerson"))
}

// DeleteNoteForPerson is the resolver for the deleteNoteForPerson field.
func (r *mutationResolver) DeleteNoteForPerson(ctx context.Context, id string) (*model.Note, error) {
	panic(fmt.Errorf("not implemented: DeleteNoteForPerson - deleteNoteForPerson"))
}

// CreateCalendar is the resolver for the createCalendar field.
func (r *mutationResolver) CreateCalendar(ctx context.Context, input *model.CreateCalendarInput) (*model.Calendar, error) {
	panic(fmt.Errorf("not implemented: CreateCalendar - createCalendar"))
}

// UpdateCalendar is the resolver for the updateCalendar field.
func (r *mutationResolver) UpdateCalendar(ctx context.Context, input *model.UpdateCalendarInput) (*model.Calendar, error) {
	panic(fmt.Errorf("not implemented: UpdateCalendar - updateCalendar"))
}

// DeleteCalendar is the resolver for the deleteCalendar field.
func (r *mutationResolver) DeleteCalendar(ctx context.Context, id string) (*model.Calendar, error) {
	panic(fmt.Errorf("not implemented: DeleteCalendar - deleteCalendar"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
